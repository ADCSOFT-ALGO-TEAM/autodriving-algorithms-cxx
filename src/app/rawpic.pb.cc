// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rawpic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rawpic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace iv {
namespace vision {

namespace {

const ::google::protobuf::Descriptor* rawpic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rawpic_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rawpic_2eproto() {
  protobuf_AddDesc_rawpic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rawpic.proto");
  GOOGLE_CHECK(file != NULL);
  rawpic_descriptor_ = file->message_type(0);
  static const int rawpic_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rawpic, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rawpic, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rawpic, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rawpic, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rawpic, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rawpic, elemsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rawpic, mattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rawpic, picdata_),
  };
  rawpic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rawpic_descriptor_,
      rawpic::default_instance_,
      rawpic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rawpic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rawpic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rawpic));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rawpic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rawpic_descriptor_, &rawpic::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rawpic_2eproto() {
  delete rawpic::default_instance_;
  delete rawpic_reflection_;
}

void protobuf_AddDesc_rawpic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014rawpic.proto\022\tiv.vision\"\206\001\n\006rawpic\022\014\n\004"
    "time\030\001 \001(\003\022\r\n\005index\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\022"
    "\r\n\005width\030\004 \001(\005\022\016\n\006height\030\005 \001(\005\022\020\n\010elemsi"
    "ze\030\006 \001(\005\022\017\n\007mattype\030\007 \001(\005\022\017\n\007picdata\030\010 \001"
    "(\014", 162);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rawpic.proto", &protobuf_RegisterTypes);
  rawpic::default_instance_ = new rawpic();
  rawpic::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rawpic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rawpic_2eproto {
  StaticDescriptorInitializer_rawpic_2eproto() {
    protobuf_AddDesc_rawpic_2eproto();
  }
} static_descriptor_initializer_rawpic_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int rawpic::kTimeFieldNumber;
const int rawpic::kIndexFieldNumber;
const int rawpic::kTypeFieldNumber;
const int rawpic::kWidthFieldNumber;
const int rawpic::kHeightFieldNumber;
const int rawpic::kElemsizeFieldNumber;
const int rawpic::kMattypeFieldNumber;
const int rawpic::kPicdataFieldNumber;
#endif  // !_MSC_VER

rawpic::rawpic()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iv.vision.rawpic)
}

void rawpic::InitAsDefaultInstance() {
}

rawpic::rawpic(const rawpic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iv.vision.rawpic)
}

void rawpic::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  index_ = 0;
  type_ = 0;
  width_ = 0;
  height_ = 0;
  elemsize_ = 0;
  mattype_ = 0;
  picdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rawpic::~rawpic() {
  // @@protoc_insertion_point(destructor:iv.vision.rawpic)
  SharedDtor();
}

void rawpic::SharedDtor() {
  if (picdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete picdata_;
  }
  if (this != default_instance_) {
  }
}

void rawpic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rawpic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rawpic_descriptor_;
}

const rawpic& rawpic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rawpic_2eproto();
  return *default_instance_;
}

rawpic* rawpic::default_instance_ = NULL;

rawpic* rawpic::New() const {
  return new rawpic;
}

void rawpic::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<rawpic*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(time_, mattype_);
    if (has_picdata()) {
      if (picdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        picdata_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rawpic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iv.vision.rawpic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional int32 width = 4;
      case 4: {
        if (tag == 32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }

      // optional int32 height = 5;
      case 5: {
        if (tag == 40) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_elemsize;
        break;
      }

      // optional int32 elemsize = 6;
      case 6: {
        if (tag == 48) {
         parse_elemsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elemsize_)));
          set_has_elemsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mattype;
        break;
      }

      // optional int32 mattype = 7;
      case 7: {
        if (tag == 56) {
         parse_mattype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mattype_)));
          set_has_mattype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_picdata;
        break;
      }

      // optional bytes picdata = 8;
      case 8: {
        if (tag == 66) {
         parse_picdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_picdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iv.vision.rawpic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iv.vision.rawpic)
  return false;
#undef DO_
}

void rawpic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iv.vision.rawpic)
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // optional int32 height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }

  // optional int32 elemsize = 6;
  if (has_elemsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->elemsize(), output);
  }

  // optional int32 mattype = 7;
  if (has_mattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mattype(), output);
  }

  // optional bytes picdata = 8;
  if (has_picdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->picdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:iv.vision.rawpic)
}

::google::protobuf::uint8* rawpic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iv.vision.rawpic)
  // optional int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // optional int32 height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->height(), target);
  }

  // optional int32 elemsize = 6;
  if (has_elemsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->elemsize(), target);
  }

  // optional int32 mattype = 7;
  if (has_mattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mattype(), target);
  }

  // optional bytes picdata = 8;
  if (has_picdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->picdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iv.vision.rawpic)
  return target;
}

int rawpic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 elemsize = 6;
    if (has_elemsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elemsize());
    }

    // optional int32 mattype = 7;
    if (has_mattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mattype());
    }

    // optional bytes picdata = 8;
    if (has_picdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->picdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rawpic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rawpic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rawpic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rawpic::MergeFrom(const rawpic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_elemsize()) {
      set_elemsize(from.elemsize());
    }
    if (from.has_mattype()) {
      set_mattype(from.mattype());
    }
    if (from.has_picdata()) {
      set_picdata(from.picdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rawpic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rawpic::CopyFrom(const rawpic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rawpic::IsInitialized() const {

  return true;
}

void rawpic::Swap(rawpic* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(index_, other->index_);
    std::swap(type_, other->type_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(elemsize_, other->elemsize_);
    std::swap(mattype_, other->mattype_);
    std::swap(picdata_, other->picdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rawpic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rawpic_descriptor_;
  metadata.reflection = rawpic_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vision
}  // namespace iv

// @@protoc_insertion_point(global_scope)
