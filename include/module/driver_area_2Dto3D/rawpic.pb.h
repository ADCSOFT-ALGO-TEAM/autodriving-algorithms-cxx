// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rawpic.proto

#ifndef PROTOBUF_rawpic_2eproto__INCLUDED
#define PROTOBUF_rawpic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace iv {
namespace vision {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rawpic_2eproto();
void protobuf_AssignDesc_rawpic_2eproto();
void protobuf_ShutdownFile_rawpic_2eproto();

class rawpic;

// ===================================================================

class rawpic : public ::google::protobuf::Message {
 public:
  rawpic();
  virtual ~rawpic();

  rawpic(const rawpic& from);

  inline rawpic& operator=(const rawpic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rawpic& default_instance();

  void Swap(rawpic* other);

  // implements Message ----------------------------------------------

  rawpic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rawpic& from);
  void MergeFrom(const rawpic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 width = 4;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 5;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 5;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 elemsize = 6;
  inline bool has_elemsize() const;
  inline void clear_elemsize();
  static const int kElemsizeFieldNumber = 6;
  inline ::google::protobuf::int32 elemsize() const;
  inline void set_elemsize(::google::protobuf::int32 value);

  // optional int32 mattype = 7;
  inline bool has_mattype() const;
  inline void clear_mattype();
  static const int kMattypeFieldNumber = 7;
  inline ::google::protobuf::int32 mattype() const;
  inline void set_mattype(::google::protobuf::int32 value);

  // optional bytes picdata = 8;
  inline bool has_picdata() const;
  inline void clear_picdata();
  static const int kPicdataFieldNumber = 8;
  inline const ::std::string& picdata() const;
  inline void set_picdata(const ::std::string& value);
  inline void set_picdata(const char* value);
  inline void set_picdata(const void* value, size_t size);
  inline ::std::string* mutable_picdata();
  inline ::std::string* release_picdata();
  inline void set_allocated_picdata(::std::string* picdata);

  // @@protoc_insertion_point(class_scope:iv.vision.rawpic)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_elemsize();
  inline void clear_has_elemsize();
  inline void set_has_mattype();
  inline void clear_has_mattype();
  inline void set_has_picdata();
  inline void clear_has_picdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 elemsize_;
  ::google::protobuf::int32 mattype_;
  ::std::string* picdata_;
  friend void  protobuf_AddDesc_rawpic_2eproto();
  friend void protobuf_AssignDesc_rawpic_2eproto();
  friend void protobuf_ShutdownFile_rawpic_2eproto();

  void InitAsDefaultInstance();
  static rawpic* default_instance_;
};
// ===================================================================


// ===================================================================

// rawpic

// optional int64 time = 1;
inline bool rawpic::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rawpic::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rawpic::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rawpic::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 rawpic::time() const {
  // @@protoc_insertion_point(field_get:iv.vision.rawpic.time)
  return time_;
}
inline void rawpic::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:iv.vision.rawpic.time)
}

// optional int32 index = 2;
inline bool rawpic::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rawpic::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rawpic::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rawpic::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 rawpic::index() const {
  // @@protoc_insertion_point(field_get:iv.vision.rawpic.index)
  return index_;
}
inline void rawpic::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:iv.vision.rawpic.index)
}

// optional int32 type = 3;
inline bool rawpic::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rawpic::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rawpic::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rawpic::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 rawpic::type() const {
  // @@protoc_insertion_point(field_get:iv.vision.rawpic.type)
  return type_;
}
inline void rawpic::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:iv.vision.rawpic.type)
}

// optional int32 width = 4;
inline bool rawpic::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rawpic::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void rawpic::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void rawpic::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 rawpic::width() const {
  // @@protoc_insertion_point(field_get:iv.vision.rawpic.width)
  return width_;
}
inline void rawpic::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:iv.vision.rawpic.width)
}

// optional int32 height = 5;
inline bool rawpic::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void rawpic::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void rawpic::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void rawpic::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 rawpic::height() const {
  // @@protoc_insertion_point(field_get:iv.vision.rawpic.height)
  return height_;
}
inline void rawpic::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:iv.vision.rawpic.height)
}

// optional int32 elemsize = 6;
inline bool rawpic::has_elemsize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void rawpic::set_has_elemsize() {
  _has_bits_[0] |= 0x00000020u;
}
inline void rawpic::clear_has_elemsize() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void rawpic::clear_elemsize() {
  elemsize_ = 0;
  clear_has_elemsize();
}
inline ::google::protobuf::int32 rawpic::elemsize() const {
  // @@protoc_insertion_point(field_get:iv.vision.rawpic.elemsize)
  return elemsize_;
}
inline void rawpic::set_elemsize(::google::protobuf::int32 value) {
  set_has_elemsize();
  elemsize_ = value;
  // @@protoc_insertion_point(field_set:iv.vision.rawpic.elemsize)
}

// optional int32 mattype = 7;
inline bool rawpic::has_mattype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void rawpic::set_has_mattype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void rawpic::clear_has_mattype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void rawpic::clear_mattype() {
  mattype_ = 0;
  clear_has_mattype();
}
inline ::google::protobuf::int32 rawpic::mattype() const {
  // @@protoc_insertion_point(field_get:iv.vision.rawpic.mattype)
  return mattype_;
}
inline void rawpic::set_mattype(::google::protobuf::int32 value) {
  set_has_mattype();
  mattype_ = value;
  // @@protoc_insertion_point(field_set:iv.vision.rawpic.mattype)
}

// optional bytes picdata = 8;
inline bool rawpic::has_picdata() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void rawpic::set_has_picdata() {
  _has_bits_[0] |= 0x00000080u;
}
inline void rawpic::clear_has_picdata() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void rawpic::clear_picdata() {
  if (picdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picdata_->clear();
  }
  clear_has_picdata();
}
inline const ::std::string& rawpic::picdata() const {
  // @@protoc_insertion_point(field_get:iv.vision.rawpic.picdata)
  return *picdata_;
}
inline void rawpic::set_picdata(const ::std::string& value) {
  set_has_picdata();
  if (picdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picdata_ = new ::std::string;
  }
  picdata_->assign(value);
  // @@protoc_insertion_point(field_set:iv.vision.rawpic.picdata)
}
inline void rawpic::set_picdata(const char* value) {
  set_has_picdata();
  if (picdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picdata_ = new ::std::string;
  }
  picdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:iv.vision.rawpic.picdata)
}
inline void rawpic::set_picdata(const void* value, size_t size) {
  set_has_picdata();
  if (picdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picdata_ = new ::std::string;
  }
  picdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:iv.vision.rawpic.picdata)
}
inline ::std::string* rawpic::mutable_picdata() {
  set_has_picdata();
  if (picdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    picdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:iv.vision.rawpic.picdata)
  return picdata_;
}
inline ::std::string* rawpic::release_picdata() {
  clear_has_picdata();
  if (picdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = picdata_;
    picdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void rawpic::set_allocated_picdata(::std::string* picdata) {
  if (picdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete picdata_;
  }
  if (picdata) {
    set_has_picdata();
    picdata_ = picdata;
  } else {
    clear_has_picdata();
    picdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:iv.vision.rawpic.picdata)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vision
}  // namespace iv

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rawpic_2eproto__INCLUDED
